using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {

            //Bai 01
            int n = 4;
            int[] array = new int[n];
            for (int i = 0; i < n; i++)
            {
                array[i] = i + 1;
            }

            int totalSum = SumArray(array, 0, n - 1);

            Console.WriteLine("The sum of the arrays from 1 to " + n + " is: " + totalSum);




            //Bai 02
            int[] arr = { 5, 2, 4, 6, 1, 3 };
            //Console.WriteLine("Array: " + string.Join(", ", arr));

            // Sắp xếp
            QuickSort(arr, 0, arr.Length - 1);
            Console.WriteLine("Array after: " + string.Join(", ", arr));


            //Bai 03
            int index = BinarySearchRecursive(arr, 4, 0, arr.Length - 1);

            Console.Write("Position of 4 is: ");
            Console.WriteLine(index); // Output:






            Console.ReadLine();
        }

        // Không đệ quy
        public static int BinarySearchIterative(int[] arr, int target)
        {
            int left = 0;
            int right = arr.Length - 1;

            while (left <= right)
            {
                int mid = left + (right - left) / 2;

                if (arr[mid] == target)
                    return mid;

                if (arr[mid] < target)
                    left = mid + 1;
                else
                    right = mid - 1;
            }

            return -1;
        }
        // Đệ quy
        public static int BinarySearchRecursive(int[] arr, int target, int left, int right)
        {
            if (left > right)
                return -1;

            int mid = left + (right - left) / 2;

            if (arr[mid] == target)
                return mid;

            if (arr[mid] < target)
                return BinarySearchRecursive(arr, target, mid + 1, right);
            else
                return BinarySearchRecursive(arr, target, left, mid - 1);
        }

        public static void QuickSort(int[] arr, int left, int right)
        {
            if (left < right)
            {
                int pivotIndex = Partition(arr, left, right);
                QuickSort(arr, left, pivotIndex - 1);
                QuickSort(arr, pivotIndex + 1, right);
            }
        }

        private static int Partition(int[] arr, int left, int right)
        {
            int pivot = arr[right];
            int i = left - 1;

            for (int j = left; j < right; j++)
            {
                if (arr[j] < pivot)
                {
                    i++;
                    Swap(arr, i, j);
                }
            }

            Swap(arr, i + 1, right);
            return i + 1;
        }

        private static void Swap(int[] arr, int i, int j)
        {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }


        //------------------------------------------
        // Hàm tính tổng mảng đệ qui
        static int SumArray(int[] array, int start, int end)
        {
            // Nếu chỉ còn một phần tử, trả về phần tử đó
            if (start == end)
            {
                return array[start];
            }
            int mid = (start + end) / 2;

            // Tính tổng của nửa trái và nửa phải
            int leftSum = SumArray(array, start, mid);
            int rightSum = SumArray(array, mid + 1, end);

            return leftSum + rightSum;
        }

        // Hàm tính tổng mảng không đệ qui
        public static int SumArrayRecursive(int[] array)
        {
            int sum = 0;
            for (int i = 0; i < array.Length; i++)
            {
                sum += array[i];
            }
            return sum;
        }
    }
}